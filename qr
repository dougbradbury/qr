#!/usr/bin/env python3

import argparse
import qrcode
import sys
import os

def main():
    parser = argparse.ArgumentParser(description='Generate QR codes from the command line')
    parser.add_argument('url', help='URL or text to encode in QR code')
    parser.add_argument('-o', '--output', default='qr_code.png', help='Output filename (default: qr_code.png)')
    parser.add_argument('-s', '--size', type=int, default=10, help='Box size (default: 10)')
    parser.add_argument('-b', '--border', type=int, default=4, help='Border size (default: 4)')
    parser.add_argument('-e', '--error-correction', choices=['L', 'M', 'Q', 'H'], default='L', help='Error correction level (default: L)')
    parser.add_argument('--fill-color', default='black', help='Fill color (default: black)')
    parser.add_argument('--back-color', default='white', help='Background color (default: white)')
    
    args = parser.parse_args()
    
    # Error correction mapping
    error_correction_map = {
        'L': qrcode.constants.ERROR_CORRECT_L,
        'M': qrcode.constants.ERROR_CORRECT_M,
        'Q': qrcode.constants.ERROR_CORRECT_Q,
        'H': qrcode.constants.ERROR_CORRECT_H
    }
    
    try:
        # Create QR code
        qr = qrcode.QRCode(
            version=1,
            error_correction=error_correction_map[args.error_correction],
            box_size=args.size,
            border=args.border,
        )
        
        qr.add_data(args.url)
        qr.make(fit=True)
        
        # Generate image
        img = qr.make_image(fill_color=args.fill_color, back_color=args.back_color)
        img.save(args.output)
        
        print(f"QR code saved as {args.output}")
        
    except Exception as e:
        print(f"Error generating QR code: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()